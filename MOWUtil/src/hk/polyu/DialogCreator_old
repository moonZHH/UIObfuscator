package hk.polyu;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;

import android.app.Activity;
import android.app.Dialog;
import android.content.DialogInterface;
import android.os.Build;
import android.os.Handler;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;

public class DialogCreator {

    static View previousFocusedView = null;
    static View previousFocusedRootView = null;

    static Runnable showRunnable = new Runnable() {
        @Override
        public void run() {
            View currentFocusedView = getFocusedView();
            View currentFocusedRootView = getFocusedRootView();

            /*
            if (currentFocusedView != null)
                Log.d("polyuA", "focusedView -> " + currentFocusedView.toString() + " " + currentFocusedView.isFocusable() + " " + currentFocusedView.isFocusable());
            if (currentFocusedRootView != null)
                Log.d("polyuA", "focusedRootView -> " + currentFocusedRootView.toString() + " " + currentFocusedRootView.isFocusable() + " " + currentFocusedRootView.isFocusable());
            */

            if (currentFocusedView != null && currentFocusedRootView != null) {
                try {
                    // android.view.inputmethod.InputMethodManager
                    Class<?> InputMethodManagerClass = Class.forName("android.view.inputmethod.InputMethodManager");

                    // InputMethodManager.peekInstance()
                    Method getInstanceMethod = InputMethodManagerClass.getDeclaredMethod("peekInstance", null);
                    getInstanceMethod.setAccessible(true);

                    // 获取InputMethodManager实例
                    InputMethodManager imm = (InputMethodManager) getInstanceMethod.invoke(null);

                    // InputMethodManager.mCurRootView
                    Field mCurRootViewField = InputMethodManagerClass.getDeclaredField("mCurRootView");
                    mCurRootViewField.setAccessible(true);

                    // 设置mCurRootView字段
                    mCurRootViewField.set(imm, currentFocusedRootView);

                    // InputMethodManager.focusIn(View)
                    Method focusInMethod = InputMethodManagerClass.getDeclaredMethod("focusIn", new Class[]{View.class});
                    focusInMethod.setAccessible(true);

                    // 调用focusIn方法, 其参数为focusedView
                    focusInMethod.invoke(imm, currentFocusedView);
                } catch (ClassNotFoundException cnfe) {
                    cnfe.printStackTrace();
                } catch (NoSuchMethodException nsme) {
                    nsme.printStackTrace();
                } catch (IllegalAccessException iae) {
                    iae.printStackTrace();
                } catch (InvocationTargetException ite) {
                    ite.printStackTrace();
                } catch (NoSuchFieldException nsfe) {
                    nsfe.printStackTrace();
                }
            }
        }
    };

    static Runnable motionRunnable = new Runnable() {
        @Override
        public void run() {
            View currentFocusedView = getFocusedView();
            View currentFocusedRootView = getFocusedRootView();

            /*
            if (currentFocusedView != null)
                Log.d("polyuC", "currentFocusedView -> " + currentFocusedView.toString() + " " + currentFocusedView.isFocusable() + " " + currentFocusedView.isFocusable());
            if (currentFocusedRootView != null)
                Log.d("polyuC", "currentFocusedRootView -> " + currentFocusedRootView.toString() + " " + currentFocusedRootView.isFocusable() + " " + currentFocusedRootView.isFocusable());
            */

            try {
                // android.view.inputmethod.InputMethodManager
                Class<?> InputMethodManagerClass = Class.forName("android.view.inputmethod.InputMethodManager");

                // InputMethodManager.peekInstance()
                Method getInstanceMethod = InputMethodManagerClass.getDeclaredMethod("peekInstance", null);
                getInstanceMethod.setAccessible(true);

                // 获取InputMethodManager实例
                InputMethodManager imm = (InputMethodManager) getInstanceMethod.invoke(null);

                // first, we should hide the previously shown imm
                if (previousFocusedView != null && previousFocusedRootView != null) {
                    if (currentFocusedView == null || currentFocusedRootView != previousFocusedRootView) {
                        if (imm.isActive(previousFocusedView)) {
                            imm.hideSoftInputFromWindow(previousFocusedRootView.getWindowToken(), 0);
                        }
                    }
                }

                // then, we should popup new imm
                if (currentFocusedView != null && currentFocusedRootView != null) {
                    if (currentFocusedView instanceof EditText) {
                        // InputMethodManager.mCurRootView
                        Field mCurRootViewField = InputMethodManagerClass.getDeclaredField("mCurRootView");
                        mCurRootViewField.setAccessible(true);

                        // 设置mCurRootView字段
                        mCurRootViewField.set(imm, currentFocusedRootView);

                        // InputMethodManager.focusIn(View)
                        Method focusInMethod = InputMethodManagerClass.getDeclaredMethod("focusIn", new Class[]{View.class});
                        focusInMethod.setAccessible(true);

                        // 调用focusIn方法, 其参数为focusedView
                        focusInMethod.invoke(imm, currentFocusedView);
                    }
                }
            } catch (ClassNotFoundException cnfe) {
                cnfe.printStackTrace();
            } catch (NoSuchMethodException nsme) {
                nsme.printStackTrace();
            } catch (IllegalAccessException iae) {
                iae.printStackTrace();
            } catch (InvocationTargetException ite) {
                ite.printStackTrace();
            } catch (NoSuchFieldException nsfe) {
                nsfe.printStackTrace();
            }

            // current -> previous
            previousFocusedView = currentFocusedView;
            previousFocusedRootView = currentFocusedRootView;
        }
    };

    static int dialogIndex = 1;

    public static void ShowDialog(final Activity activity) {
        // create a transparent window based on Dialog
        final Dialog dialog = new Dialog(activity/*, android.R.style.Theme_Translucent_NoTitleBar_Fullscreen*/);
        // dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setTitle("Draw on Top Attack " + dialogIndex);
        dialogIndex++;

        WindowManager.LayoutParams lp = dialog.getWindow().getAttributes();
        lp.x = 0;
        lp.y = 0;
        lp.height = 5;
        lp.width = 5;
        lp.flags |= WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                 |  WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH
                 |  WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;

        lp.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN;
        lp.type = WindowManager.LayoutParams.TYPE_TOAST;
        dialog.getWindow().setAttributes(lp);

        dialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                // bind the current focused view to imm (系统默认不绑定当前focused view到imm, 为了与我们的机制统一, 人为绑定)
                Handler showHandler = new Handler();
                showHandler.postDelayed(showRunnable, 200);
            }
        });

        // deal with softInputMethod
        View dialogDecorView = dialog.getWindow().getDecorView();
        dialogDecorView.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                if (motionEvent.getAction() == MotionEvent.ACTION_OUTSIDE) {
                    Handler motionHandler = new Handler();
                    motionHandler.postDelayed(motionRunnable, 200);
                    return true;
                }
                return false;
            }
        });

        // deal with back button
        dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
            @Override
            public boolean onKey(DialogInterface dialogInterface, int i, KeyEvent keyEvent) {
                try {
                    // android.view.inputmethod.InputMethodManager
                    Class<?> InputMethodManagerClass = Class.forName("android.view.inputmethod.InputMethodManager");

                    // InputMethodManager.peekInstance()
                    Method getInstanceMethod = InputMethodManagerClass.getDeclaredMethod("peekInstance", null);
                    getInstanceMethod.setAccessible(true);

                    // 获取InputMethodManager实例
                    InputMethodManager imm = (InputMethodManager) getInstanceMethod.invoke(null);

                    if (i == KeyEvent.KEYCODE_BACK/* && keyEvent.getAction() == KeyEvent.ACTION_DOWN*/) {
                    	/*
                        // back button总是先消除焦点
                        {
                            View currentFocusedView = getFocusedView();
                            View currentFocusedRootView = getFocusedRootView();
                            View lastRootView = getLastRootView();

                            // android.widget.Editor$InsertionHandleView
                            Class InsertionHandleViewClass = Class.forName("android.widget.Editor$InsertionHandleView");
                            
                            if (currentFocusedView != null && currentFocusedRootView != null && (lastRootView == currentFocusedRootView || lastRootView.getClass().isAssignableFrom(InsertionHandleViewClass))) {
                                // android.view.View
                                Class<?> ViewClass = Class.forName("android.view.View");

                                if (Build.VERSION.SDK_INT > 19) {
                                    // View.unFocus(View)
                                    Method unFocusMethod = ViewClass.getDeclaredMethod("unFocus", new Class[]{View.class});
                                    unFocusMethod.setAccessible(true);

                                    // 调用View.unFocus(View)清除焦点
                                    unFocusMethod.invoke(currentFocusedRootView, currentFocusedView);
                                } else {
                                    // View.unFocus()
                                    Method unFocusMethod = ViewClass.getDeclaredMethod("unFocus", null);
                                    unFocusMethod.setAccessible(true);

                                    // 调用View.unFocus()清除焦点
                                    unFocusMethod.invoke(currentFocusedRootView);
                                }
                            }

                            previousFocusedView = currentFocusedView;
                            previousFocusedRootView = currentFocusedRootView;
                        }
                        */

                        // update
                        View currentFocusedView = getFocusedView();
                        View currentFocusedRootView = getFocusedRootView();
                        View lastRootView = getLastRootView();
                        
                        if (currentFocusedView != null)
                            Log.d("polyuA", "focusedView -> " + currentFocusedView.toString() + " " + currentFocusedView.isFocusable());
                        if (currentFocusedRootView != null)
                            Log.d("polyuA", "focusedRootView -> " + currentFocusedRootView.toString() + " " + currentFocusedRootView.isFocusable());
                        if (lastRootView != null) {
                        	Log.d("polyuA", "lastRootView -> " + lastRootView.toString() + " " + lastRootView.isFocusable());
                        	Log.d("polyuA", "lastRootView.class -> " + lastRootView.getClass());
                        }
                        
                        
                        /* test */
                        if (currentFocusedView != null) {
                        	assert(currentFocusedRootView != null);
                        	Method dispatchKeyEventPreImeMethod = lastRootView.getClass().getDeclaredMethod("dispatchKeyEventPreIme", new Class[] {KeyEvent.class});
                        	dispatchKeyEventPreImeMethod.invoke(lastRootView, keyEvent);
                        	return true;
                        } else {
                        	Method dispatchKeyEventMethod = lastRootView.getClass().getDeclaredMethod("dispatchKeyEvent", new Class[] {KeyEvent.class});
                        	dispatchKeyEventMethod.invoke(lastRootView, keyEvent);
                        	return true;
                        }
                        
                        /*
                        if (currentFocusedView != null)
                            Log.d("polyuA", "focusedView -> " + currentFocusedView.toString() + " " + currentFocusedView.isFocusable() + " " + currentFocusedView.isFocusable());
                        if (currentFocusedRootView != null)
                            Log.d("polyuA", "focusedRootView -> " + currentFocusedRootView.toString() + " " + currentFocusedRootView.isFocusable() + " " + currentFocusedRootView.isFocusable());
                        if (lastRootView != null)
                            Log.d("polyuA", "lastRootView -> " + lastRootView.toString() + " " + lastRootView.isFocusable() + " " + lastRootView.isFocusable());
                        */

                        // android.widget.Editor$InsertionHandleView
                        /*
                        Class InsertionHandleViewClass = Class.forName("android.widget.Editor$InsertionHandleView");

                        if (previousFocusedView != null && imm.isActive(previousFocusedView) && (lastRootView == previousFocusedRootView || lastRootView.getClass().isAssignableFrom(InsertionHandleViewClass))) {
                            Log.d("polyu", "1");

                            // flag == false -> this is no soft input window
                            boolean flag = imm.hideSoftInputFromWindow(previousFocusedRootView.getWindowToken(), 0);

                            if (flag) {
                                Log.d("polyu", "1-1");
                                return true;
                            }

                            Log.d("polyu", "1-2");
                        }
                        */

                        /*
                        if (lastRootView == activity.getWindow().getDecorView()) {
                            Log.d("polyu", "2");

                            try {
                                Log.d("polyu", "2-1");
                                activity.onBackPressed(); // activity.onBackPressed() may sometimes raise some problems
                            } catch(Exception e) {
                                Log.d("polyu", "2-2");
                                dialog.dismiss();
                                activity.finish();
                            }

                            return true;
                        } else {
                            Log.d("polyu", "3");

                            // com.android.internal.policy.impl.PhoneWindow$DecorView
                            {
                                // if lastRootView is an instance of PhoneWindow$DecorView
                                Class DecorViewClass = Class.forName("com.android.internal.policy.impl.PhoneWindow$DecorView");
                                if (lastRootView.getClass().isAssignableFrom(DecorViewClass)) {
                                    // DecorView.dispatchKeyEvent(KeyEvent)
                                    Method dispatchKeyEventMethod = DecorViewClass.getDeclaredMethod("dispatchKeyEvent", new Class[] {KeyEvent.class});
                                    dispatchKeyEventMethod.setAccessible(true);

                                    // 调用dispatchKeyEvent函数
                                    dispatchKeyEventMethod.invoke(lastRootView, keyEvent);

                                    return true;
                                }
                            }

                            // android.widget.PopupWindow$PopupViewContainer or android.widget.PopupWindow$PopupDecorView
                            {
                                if (Build.VERSION.SDK_INT < 23) {
                                    // if lastRootView is an instance of PopupWindow$PopupViewContainer
                                    Class PopupViewContainerClass = Class.forName("android.widget.PopupWindow$PopupViewContainer");
                                    if (lastRootView.getClass().isAssignableFrom(PopupViewContainerClass)) {
                                        // PopupViewContainer.dispatchKeyEvent(KeyEvent)
                                        Method dispatchKeyEventMethod = PopupViewContainerClass.getDeclaredMethod("dispatchKeyEvent", new Class[]{KeyEvent.class});
                                        dispatchKeyEventMethod.setAccessible(true);

                                        // 调用dispatchKeyEvent函数
                                        dispatchKeyEventMethod.invoke(lastRootView, keyEvent);

                                        return true;
                                    }
                                } else {
                                    // if lastRootView is an instance of PopupWindow$PopupDecorView
                                    Class PopupDecorViewClass = Class.forName("android.widget.PopupWindow$PopupDecorView");
                                    if (lastRootView.getClass().isAssignableFrom(PopupDecorViewClass)) {
                                        // PopupDecorView.dispatchKeyEvent(KeyEvent)
                                        Method dispatchKeyEventMethod = PopupDecorViewClass.getDeclaredMethod("dispatchKeyEvent", new Class[]{KeyEvent.class});
                                        dispatchKeyEventMethod.setAccessible(true);

                                        // 调用dispatchKeyEvent函数
                                        dispatchKeyEventMethod.invoke(lastRootView, keyEvent);

                                        return true;
                                    }
                                }
                            }

                            // normally, we rely on WindowManaherGlobal.removeView()
                            {
                                // android.view.WindowManagerGlobal
                                Class<?> WindowManagerGlobalClass = Class.forName("android.view.WindowManagerGlobal");

                                // WindowManagerGlobal.getInstance()
                                Method getWMGInstanceMethod = WindowManagerGlobalClass.getDeclaredMethod("getInstance", null);
                                getWMGInstanceMethod.setAccessible(true);

                                // 获取WindowManagerGlobal单例
                                Object mGlobal = getWMGInstanceMethod.invoke(null);

                                // WindowManagerGlobal.removeView(View, boolean)
                                Method removeViewMethod = WindowManagerGlobalClass.getDeclaredMethod("removeView", new Class[]{View.class, boolean.class});
                                removeViewMethod.setAccessible(true);

                                // 调用WindowManagerGlobal.removeView函数
                                removeViewMethod.invoke(mGlobal, lastRootView, true);

                                return true;
                            }
                        }
                        */
                    }

                    /*
                    if (i == KeyEvent.KEYCODE_BACK && keyEvent.getAction() == KeyEvent.ACTION_UP) {
                        View lastRootView = getLastRootView();

                        // com.android.internal.policy.impl.PhoneWindow$DecorView
                        {
                            // if lastRootView is an instance of PhoneWindow$DecorView
                            Class DecorViewClass = Class.forName("com.android.internal.policy.impl.PhoneWindow$DecorView");
                            if (lastRootView.getClass().isAssignableFrom(DecorViewClass)) {
                                // DecorView.dispatchKeyEvent(KeyEvent)
                                Method dispatchKeyEventMethod = DecorViewClass.getDeclaredMethod("dispatchKeyEvent", new Class[] {KeyEvent.class});
                                dispatchKeyEventMethod.setAccessible(true);

                                // 调用dispatchKeyEvent函数
                                dispatchKeyEventMethod.invoke(lastRootView, keyEvent);

                                return true;
                            }
                        }

                        // android.widget.PopupWindow$PopupViewContainer or android.widget.PopupWindow$PopupDecorView
                        {
                            if (Build.VERSION.SDK_INT < 23) {
                                // if lastRootView is an instance of PopupWindow$PopupViewContainer
                                Class PopupViewContainerClass = Class.forName("android.widget.PopupWindow$PopupViewContainer");
                                if (lastRootView.getClass().isAssignableFrom(PopupViewContainerClass)) {
                                    // PopupViewContainer.dispatchKeyEvent(KeyEvent)
                                    Method dispatchKeyEventMethod = PopupViewContainerClass.getDeclaredMethod("dispatchKeyEvent", new Class[]{KeyEvent.class});
                                    dispatchKeyEventMethod.setAccessible(true);

                                    // 调用dispatchKeyEvent函数
                                    dispatchKeyEventMethod.invoke(lastRootView, keyEvent);

                                    return true;
                                }
                            } else {
                                // if lastRootView is an instance of PopupWindow$PopupDecorView
                                Class PopupDecorViewClass = Class.forName("android.widget.PopupWindow$PopupDecorView");
                                if (lastRootView.getClass().isAssignableFrom(PopupDecorViewClass)) {
                                    // PopupDecorView.dispatchKeyEvent(KeyEvent)
                                    Method dispatchKeyEventMethod = PopupDecorViewClass.getDeclaredMethod("dispatchKeyEvent", new Class[]{KeyEvent.class});
                                    dispatchKeyEventMethod.setAccessible(true);

                                    // 调用dispatchKeyEvent函数
                                    dispatchKeyEventMethod.invoke(lastRootView, keyEvent);

                                    return true;
                                }
                            }
                        }
                    }
                    */

                    // return false;
                } catch (ClassNotFoundException cnfe) {
                    cnfe.printStackTrace();
                } catch (NoSuchMethodException nsme) {
                    nsme.printStackTrace();
                } catch (IllegalAccessException iae) {
                    iae.printStackTrace();
                } catch (InvocationTargetException ite) {
                    ite.printStackTrace();
                }

                return false;
            }
        });

        dialog.show();
    }

    private static View getFocusedView() {
        try {
            // android.view.WindowManagerGlobal
            Class<?> WindowManagerGlobalClass = Class.forName("android.view.WindowManagerGlobal");

            // WindowManagerGlobal.getInstance()
            Method getInstanceMethod = WindowManagerGlobalClass.getDeclaredMethod("getInstance", null);
            getInstanceMethod.setAccessible(true);

            // 获取WindowManagerGlobal单例
            Object mGlobal = getInstanceMethod.invoke(null);

            // WindowManagerGlobal.mRoots
            Field sRootsField = WindowManagerGlobalClass.getDeclaredField("mRoots");
            sRootsField.setAccessible(true);

            // 获取mRoots字段
            Object mRoots = sRootsField.get(mGlobal); // ArrayList<ViewRootImpl>

            // java.lang.ArrayList
            Class<?> ArrayListClass = ArrayList.class;

            // ArrayList.size()
            Method sizeMethod = ArrayListClass.getDeclaredMethod("size", null);
            sizeMethod.setAccessible(true);

            // 获取mRoots的size
            int mRootSize = (int) sizeMethod.invoke(mRoots);

            // ArrayList.get()
            Method getMethod = ArrayListClass.getDeclaredMethod("get", new Class[] {int.class});
            getMethod.setAccessible(true);

            // android.view.ViewRootImpl
            Class<?> ViewRootImplClass = Class.forName("android.view.ViewRootImpl");

            // ViewRootImpl.getView()
            Method getViewMethod = ViewRootImplClass.getDeclaredMethod("getView", null);
            getViewMethod.setAccessible(true);

            // 在mRoots中从后往前遍历寻找当前拥有焦点的view
            for (int index = mRootSize - 1; index >= 0; index--) {
                Object viewRootImpl = getMethod.invoke(mRoots, index);
                View rootView = (View) getViewMethod.invoke(viewRootImpl);
                if(rootView.findFocus() != null)
                    return rootView.findFocus();
            }
        } catch (ClassNotFoundException cnfe) {
            cnfe.printStackTrace();
        } catch (NoSuchMethodException nsme) {
            nsme.printStackTrace();
        } catch (IllegalAccessException iae) {
            iae.printStackTrace();
        } catch (InvocationTargetException ite) {
            ite.printStackTrace();
        } catch (NoSuchFieldException nsfe) {
            nsfe.printStackTrace();
        }

        return null;
    }

    private static View getFocusedRootView() {
        try {
            // android.view.WindowManagerGlobal
            Class<?> WindowManagerGlobalClass = Class.forName("android.view.WindowManagerGlobal");

            // WindowManagerGlobal.getInstance()
            Method getInstanceMethod = WindowManagerGlobalClass.getDeclaredMethod("getInstance", null);
            getInstanceMethod.setAccessible(true);

            // 获取WindowManagerGlobal单例
            Object mGlobal = getInstanceMethod.invoke(null);

            // WindowManagerGlobal.mRoots
            Field sRootsField = WindowManagerGlobalClass.getDeclaredField("mRoots");
            sRootsField.setAccessible(true);

            // 获取mRoots字段
            Object mRoots = sRootsField.get(mGlobal); // ArrayList<ViewRootImpl>

            // java.lang.ArrayList
            Class<?> ArrayListClass = ArrayList.class;

            // ArrayList.size()
            Method sizeMethod = ArrayListClass.getDeclaredMethod("size", null);
            sizeMethod.setAccessible(true);

            // 获取mRoots的size
            int mRootSize = (int) sizeMethod.invoke(mRoots);

            // ArrayList.get()
            Method getMethod = ArrayListClass.getDeclaredMethod("get", new Class[] {int.class});
            getMethod.setAccessible(true);

            // android.view.ViewRootImpl
            Class<?> ViewRootImplClass = Class.forName("android.view.ViewRootImpl");

            // ViewRootImpl.getView()
            Method getViewMethod = ViewRootImplClass.getDeclaredMethod("getView", null);
            getViewMethod.setAccessible(true);

            // 在mRoots中从后往前遍历寻找当前拥有焦点的view
            for (int index = mRootSize - 1; index >= 0; index--) {
                Object viewRootImpl = getMethod.invoke(mRoots, index);
                View rootView = (View) getViewMethod.invoke(viewRootImpl);
                if(rootView.findFocus() != null)
                    return rootView;
            }
        } catch (ClassNotFoundException cnfe) {
            cnfe.printStackTrace();
        } catch (NoSuchMethodException nsme) {
            nsme.printStackTrace();
        } catch (IllegalAccessException iae) {
            iae.printStackTrace();
        } catch (InvocationTargetException ite) {
            ite.printStackTrace();
        } catch (NoSuchFieldException nsfe) {
            nsfe.printStackTrace();
        }

        return null;
    }

    private static View getLastRootView() {
        try {
            // android.view.WindowManagerGlobal
            Class<?> WindowManagerGlobalClass = Class.forName("android.view.WindowManagerGlobal");

            // WindowManagerGlobal.getInstance()
            Method getInstanceMethod = WindowManagerGlobalClass.getDeclaredMethod("getInstance", null);
            getInstanceMethod.setAccessible(true);

            // 获取WindowManagerGlobal单例
            Object mGlobal = getInstanceMethod.invoke(null);

            // WindowManagerGlobal.mRoots
            Field sRootsField = WindowManagerGlobalClass.getDeclaredField("mRoots");
            sRootsField.setAccessible(true);

            // 获取mRoots字段
            Object mRoots = sRootsField.get(mGlobal); // ArrayList<ViewRootImpl>

            // java.lang.ArrayList
            Class<?> ArrayListClass = ArrayList.class;

            // ArrayList.size()
            Method sizeMethod = ArrayListClass.getDeclaredMethod("size", null);
            sizeMethod.setAccessible(true);

            // 获取mRoots的size
            int mRootSize = (int) sizeMethod.invoke(mRoots);

            // ArrayList.get()
            Method getMethod = ArrayListClass.getDeclaredMethod("get", new Class[] {int.class});
            getMethod.setAccessible(true);

            // android.view.ViewRootImpl
            Class<?> ViewRootImplClass = Class.forName("android.view.ViewRootImpl");

            // ViewRootImpl.getView()
            Method getViewMethod = ViewRootImplClass.getDeclaredMethod("getView", null);
            getViewMethod.setAccessible(true);

            // 在mRoots中取出最后一个view
            Object viewRootImpl = getMethod.invoke(mRoots, mRootSize - 1);
            View rootView = (View) getViewMethod.invoke(viewRootImpl);
            return rootView;
        } catch (ClassNotFoundException cnfe) {
            cnfe.printStackTrace();
        } catch (NoSuchMethodException nsme) {
            nsme.printStackTrace();
        } catch (IllegalAccessException iae) {
            iae.printStackTrace();
        } catch (InvocationTargetException ite) {
            ite.printStackTrace();
        } catch (NoSuchFieldException nsfe) {
            nsfe.printStackTrace();
        }

        return null;
    }

}
